dawarich:
  image:
    repository: docker.io/freikin/dawarich
    pullPolicy: IfNotPresent
    tag: "0.25.9"

  keyBase:
    existingSecret: dawarich-secrets

  env:
    minMinutesSpentInCity: "60"
    timeZone: "America/Chicago"
    backgroundProcessingConcurrency: "10"
    applicationProtocol: "http"
    distanceUnit: "km"
    prometheusExporterEnabled: "false"
    prometheusExporterHost: "127.0.0.1"
    prometheusExporterPort: "9394"
    railsLogToStdout: "true"

  dawarich:
    replicaCount: 1
    host: "*"

  sidekiq:
    replicaCount: 1

    livenessProbe:
      exec:
        command:
          - "sh"
          - "-c"
          - "bundle exec sidekiqmon processes | grep ${HOSTNAME}"
    readinessProbe:
      exec:
        command:
          - "sh"
          - "-c"
          - "bundle exec sidekiqmon processes | grep ${HOSTNAME}"
    startupProbe:
      exec:
        command:
          - "sh"
          - "-c"
          - "bundle exec sidekiqmon processes | grep ${HOSTNAME}"
      initialDelaySeconds: 30
      periodSeconds: 10
      failureThreshold: 10

  persistence:
    public:
      # This volume mounts to /var/app/public
      enabled: true
      accessMode: "ReadWriteOnce"
      size: 10Gi
    watched:
      # This volume mounts to /var/app/tmp/imports/watched
      enabled: true
      accessMode: "ReadWriteOnce"
      size: 10Gi
    storage:
      # This volume mounts to /var/app/storage
      enabled: true
      accessMode: "ReadWriteOnce"
      size: 5Gi

  postgresql:
    enabled: true
    host: '{{ $.Release.Name }}-postgresql'
    port: 5432
    auth:
      # Either set the postgresql credentials in the helm chart, or provide your own secret.
      database: dawarich
      existingSecret: dawarich-secrets
    primary:
      persistence:
        enabled: true
        size: 8Gi
      # https://github.com/Freika/dawarich/pull/569
      extendedConfiguration: |-
        shared_buffers = 512MB
        work_mem = 128MB
        maintenance_work_mem = 128MB
        max_wal_size = 1GB
        min_wal_size = 80MB
        max_parallel_workers_per_gather = 4
    shmVolume:
      # As per upstream
      sizeLimit: 1Gi

  redis:
    enabled: true
    host: '{{ $.Release.Name }}-redis-master'
    port: 6379
    auth:
      enabled: true
      # Use an existing secret for redis auth. Do this if you're using Argo to manage your instance or otherwise using helm template under the hood
      #     The secret name can vary, but the password key must be redis-password.
      existingSecret: dawarich-secrets
    master:
      persistence:
        enabled: false
    replica:
      replicaCount: 0

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    port: 3000

  ingress:
    enabled: false
    # enabled: true
    # className: ""
    # annotations: {}
    #   # kubernetes.io/ingress.class: nginx
    #   # kubernetes.io/tls-acme: "true"
    # hosts:
    #   - host: chart-example.local
    #     paths:
    #       - path: /
    #         pathType: ImplementationSpecific
    # tls: []
    # #  - secretName: chart-example-tls
    # #    hosts:
    # #      - chart-example.local